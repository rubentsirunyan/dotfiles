;; edn spec https://github.com/edn-format/edn
;; !  | means mandatory
;; #  | means optional
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; P  | caps_lock
;; !! | mandatory command + control + optional + shift (hyper)
;; ## | optional any

;; examples

;; !CTSequal_sign  | mandatory command control shift =
;;                 | which is command control +
;; !O#Sright_arrow | mandatory option optional any right_arrow

;; karabiner definition of mandatory and optional
;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/

{
  :profiles {
    :Default {
      :default true ;; "default true means" rules default goes into this rule if no profiles specified
      ;; simultaneous key press threshold
      ;; simlayer is implemented with to_if_alone and simultaneous key press feature
      :sim     50
      ;; to_delayed_action_delay_milliseconds
      ;; checkout karabiner's documentation
      ;; https://pqrs.org/osx/karabiner/json.html
      ;; basically it means time after which the key press is count delayed
      :delay   500
      ;; https://pqrs.org/osx/karabiner/json.html#to-if-alone
      ;; to_if_alone_timeout_milliseconds
      ;; affects to_if_alone behavior
      ;; simlayer is implemented with to_if_alone and simultaneous key press feature
      :alone   1000
      ;; to_if_held_down_threshold_milliseconds
      ;; check the doc, I don't know what does this mean.
      ;; maybe press this many milliseconds counts a "held" ?
      :held    500
    }
  }

  :applications {
    :terminals [
      "^com\\.apple\\.Terminal$",
      "^com\\.googlecode\\.iterm2$",
      "^co\\.zeit\\.hyperterm$",
      "^co\\.zeit\\.hyper$",
      "^io\\.alacritty$",
      "^net\\.kovidgoyal\\.kitty$",
    ]
  }

  :tos {
    :lazy-left-control {
      :key :left_control
      :lazy true
    }
    :lazy-hyper {
      :key :!CTOleft_shift
      :lazy true
    }
  }

  :simlayers {
    ; :space-layer {
    ;   :key :spacebar
    ;   :modi {
    ;     :mandatory [
    ;       :left_control
    ;       :left_shift
    ;       :left_option
    ;       :left_command
    ;     ]
    ;   }
    ; }
  }
  :main [
    {:des "Change tab to hyper if pressed with other keys and tab if pressed alone"
     :rules [
      [:tab :lazy-hyper nil {:alone :tab}]
    ]}
    {:des "Change caps_lock to control if pressed with other keys and escape if pressed alone"
     :rules [
      [:##caps_lock :lazy-left-control nil {:alone :escape}]
    ]}
    {:des "Change escape to hyper if pressed with other keys and escape if pressed alone"
     :rules [
      [:escape :lazy-hyper nil {:alone :escape}]
    ]}
    {:des "Change right_shift + left_shift to caps_lock"
     :rules [
      [:!S#Pright_shift :caps_lock]
      [:!R#Pleft_shift :caps_lock]
    ]}
    ; {:des "Space layer"
    ;  :rules [
    ;   [:l :!Tspacebar :space-layer]
    ;   [:t "/opt/homebrew/bin/yabai -m space --layout bsp"  :space-layer]
    ;   [:s "/opt/homebrew/bin/yabai -m space --layout stack"  :space-layer]
    ;   [:f "/opt/homebrew/bin/yabai -m space --layout float"  :space-layer]
    ; ]}
]}
